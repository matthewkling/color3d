[{"path":"http://matthewkling.github.io/colors3d/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 colors3d authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://matthewkling.github.io/colors3d/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Kling. Author, maintainer, copyright holder.","code":""},{"path":"http://matthewkling.github.io/colors3d/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kling M (2023). colors3d: Generate 2D 3D Color Palettes. R package version 1.0.1.9000,  http://matthewkling.github.io/colors3d/, https://github.com/matthewkling/colors3d.","code":"@Manual{,   title = {colors3d: Generate 2D and 3D Color Palettes},   author = {Matthew Kling},   year = {2023},   note = {R package version 1.0.1.9000,  http://matthewkling.github.io/colors3d/},   url = {https://github.com/matthewkling/colors3d}, }"},{"path":"http://matthewkling.github.io/colors3d/index.html","id":"colors3d","dir":"","previous_headings":"","what":"Generate 2D and 3D Color Palettes","title":"Generate 2D and 3D Color Palettes","text":"R package provides functions help generate two-dimensional three-dimensional color gradient legends. three main functions, colors3d, colors2d, colorwheel2d generate color row user-supplied data set 2-3 columns. can used plotting various ways.","code":""},{"path":"http://matthewkling.github.io/colors3d/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate 2D and 3D Color Palettes","text":"can install colors3d GitHub devtools::install_github(\"matthewkling/colors3d\") CRAN install.packages(\"colors3d\").","code":""},{"path":"http://matthewkling.github.io/colors3d/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Generate 2D and 3D Color Palettes","text":"’s simple application three color mapping functions. example uses tidyverse, work base R well:  realistic application, often want create pair plots given visualization: “legend” x y dimensions match used create color mapping, second plot colors displayed different data space. allows users understand relationships among four dimensions data (5, 3D color mapping used). Let’s use storms dataset (dplyr) example, hurricane windspeed, size, longitude, latitude variables interest:","code":"library(colors3d) library(tidyverse)  # simulate a 3D data set d <- expand_grid(x = 1:20, y = 1:20, z = 1:4)  # define and plot some 2D color mappings d$colors2d <- colors2d(d[, 1:2]) d$colorwheel2d <- colorwheel2d(d[, 1:2]) d %>%       gather(mapping, color, colors2d, colorwheel2d) %>%       ggplot(aes(x, y, fill = color)) +       facet_wrap(~mapping) +       geom_raster() +       scale_fill_identity() # define and plot a 3D color mapping d$color3d <- colors3d(d[, 1:3]) d %>%       ggplot(aes(x, y, fill = color3d)) +       facet_wrap(~z, nrow = 1, labeller = label_both) +       geom_raster() +       scale_fill_identity() d <- na.omit(storms) d$color <- colors2d(select(d, wind, hurricane_force_diameter),                     xtrans = \"rank\", ytrans = \"rank\")  p1 <- ggplot(d, aes(wind, hurricane_force_diameter, color = color)) +       geom_point() +       scale_color_identity() p2 <- ggplot() +       geom_polygon(data = map_data(\"state\"),                     aes(long, lat, group = group)) +       geom_path(data = d,                  aes(long, lat, color = color,                     group = paste(name, year))) +       scale_color_identity() +       coord_cartesian(xlim = range(d$long),                       ylim = range(d$lat))  library(patchwork) p1 + p2"},{"path":"http://matthewkling.github.io/colors3d/reference/colors2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Map values to a 2D legend interpolated from 4 corner colors. — colors2d","title":"Map values to a 2D legend interpolated from 4 corner colors. — colors2d","text":"function returns color value row 2-column dataset supplied, based 2D color palette interpolated 4 corner colors.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map values to a 2D legend interpolated from 4 corner colors. — colors2d","text":"","code":"colors2d(   data,   colors = c(\"yellow\", \"green\", \"blue\", \"magenta\"),   xtrans = c(\"none\", \"log\", \"rank\"),   ytrans = c(\"none\", \"log\", \"rank\") )"},{"path":"http://matthewkling.github.io/colors3d/reference/colors2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map values to a 2D legend interpolated from 4 corner colors. — colors2d","text":"data Matrix data frame 2 numeric columns; map x y. colors Vector 4 corner colors interpolate, clockwise upper right. xtrans, ytrans Transformation apply x y variables applying linear color mapping: either \"none\" (default), \"log\", \"rank\".","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map values to a 2D legend interpolated from 4 corner colors. — colors2d","text":"Character vector colors.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map values to a 2D legend interpolated from 4 corner colors. — colors2d","text":"","code":"plot(iris,       col = colors2d(iris[, c(\"Sepal.Length\", \"Sepal.Width\")]),       pch = 19, cex = 2)        plot(iris,       col = colors2d(iris[, c(\"Sepal.Length\", \"Sepal.Width\")],                     colors = c(\"limegreen\", \"gold\", \"black\", \"dodgerblue\"),                     xtrans = \"rank\", ytrans = \"rank\"),       pch = 19, cex = 2)"},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d-package.html","id":null,"dir":"Reference","previous_headings":"","what":"colors3d: Generate 2D and 3D Color Palettes — colors3d-package","title":"colors3d: Generate 2D and 3D Color Palettes — colors3d-package","text":"Generate multivariate color palettes represent two-dimensional three-dimensional data graphics (contrast standard color palettes represent just one variable). tell 'colors3d' map color space onto data, gives color data point. can use colors make plots base 'R', 'ggplot2', graphics frameworks.","code":""},{"path":[]},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"colors3d: Generate 2D and 3D Color Palettes — colors3d-package","text":"Maintainer: Matthew Kling mattkling@berkeley.edu [copyright holder]","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Map values to a 3D legend in RGB colorspace. — colors3d","title":"Map values to a 3D legend in RGB colorspace. — colors3d","text":"function returns color value row 3-column dataset supplied, transforming input data using RGB values.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map values to a 3D legend in RGB colorspace. — colors3d","text":"","code":"colors3d(data, trans = \"none\", order = 1, inversion = 1, opacity = NULL)"},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map values to a 3D legend in RGB colorspace. — colors3d","text":"data Matrix data frame 3 numeric columns. trans Either \"none\" (defaut, histogram rescaled) \"rank\" (histogram flattened). order Integer 1 6, denoting unique permutation variables--color band mapping. default value 1,  three variables `data` respectively mapped onto R, G, B  bands colorspace. inversion Integer 1 8, denoting unique combination variables reverse mapping. default value 1,  three variables mapped positive values high end color band. Together `order` parameter, allows possible 48 unique mappings given set variables onto 3D colorspace. opacity currently used.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map values to a 3D legend in RGB colorspace. — colors3d","text":"Character vector colors.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colors3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map values to a 3D legend in RGB colorspace. — colors3d","text":"","code":"d <- expand.grid(x = 1:49, y = 1:49) d$z <- cos(sqrt((d$x-25)^2 + (d$y-25)^2)) plot(d[, 1:2], col = colors3d(d), pch = 15, cex = 2)   plot(d[, 1:2], col = colors3d(d, order = 2, inversion = 2), pch = 15, cex = 2)"},{"path":"http://matthewkling.github.io/colors3d/reference/colorwheel2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Map values to a 2D colorwheel legend. — colorwheel2d","title":"Map values to a 2D colorwheel legend. — colorwheel2d","text":"function returns color value row 2-column dataset supplied, based 2D color palette defined center color series peripheral colors.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colorwheel2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map values to a 2D colorwheel legend. — colorwheel2d","text":"","code":"colorwheel2d(   data,   colors = c(\"black\", \"yellow\", \"green\", \"cyan\", \"blue\", \"magenta\", \"red\"),   origin = NULL,   xyratio = NULL,   kernel = NULL )"},{"path":"http://matthewkling.github.io/colors3d/reference/colorwheel2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map values to a 2D colorwheel legend. — colorwheel2d","text":"data Matrix data frame 2 numeric columns; map x y. colors Vector colors interpolate: center followed periphery counterclockwise 3 o'clock. origin Coordindates color wheel center. xyratio Scalar representing map elliptical color wheel data space (default 1 circular mapping weights two dimensions equally). kernel Optional function describing shape radial color gradients (default linear mapping corresponding triangular kernel); function take vector distances center sole input return positive number.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colorwheel2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map values to a 2D colorwheel legend. — colorwheel2d","text":"Character vector colors.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/colorwheel2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map values to a 2D colorwheel legend. — colorwheel2d","text":"","code":"plot(iris,        col = colorwheel2d(iris[, c(\"Sepal.Length\", \"Sepal.Width\")]),        pch = 19, cex = 2)         plot(iris,        col = colorwheel2d(                   iris[, c(\"Sepal.Length\", \"Sepal.Width\")],                   origin = c(5.5, 2.5),                   kernel = function(x) x ^ .5),        pch = 19, cex = 2)"},{"path":"http://matthewkling.github.io/colors3d/reference/distant_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Palettes of dissimilar colors in RGB space. — distant_colors","title":"Palettes of dissimilar colors in RGB space. — distant_colors","text":"Many standard palette generators use slice color space, can cause lack differentiability palettes used visualize categorical factors many levels. function attempts overcome generating colors using nearest-neighbor distance maximization 3D RGB space.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/distant_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Palettes of dissimilar colors in RGB space. — distant_colors","text":"","code":"distant_colors(   n,   res = 20,   maxreps = 1000,   radius = 10,   avoid_white = TRUE,   seed = NULL )"},{"path":"http://matthewkling.github.io/colors3d/reference/distant_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Palettes of dissimilar colors in RGB space. — distant_colors","text":"n Number colors (integer). res Number distinct values RGB dimension (integer). maxreps Max number optimization iterations (integer). radius Neighborhood size potential moves, analagous heating. avoid_white Logical, default TRUE. seed Integer used seed randomization search; leave NULL generate different results time, set value generate reproducible results.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/distant_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Palettes of dissimilar colors in RGB space. — distant_colors","text":"Character vector colors.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/distant_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Palettes of dissimilar colors in RGB space. — distant_colors","text":"","code":"plot(runif(20), runif(20),       col = distant_colors(20),       pch = 16, cex = 3)"},{"path":"http://matthewkling.github.io/colors3d/reference/polarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function converting x-y do distance-angle. — polarize","title":"Internal function converting x-y do distance-angle. — polarize","text":"Internal function converting x-y distance-angle.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/polarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function converting x-y do distance-angle. — polarize","text":"","code":"polarize(data, xyratio, xorigin = 0, yorigin = 0)"},{"path":"http://matthewkling.github.io/colors3d/reference/polarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function converting x-y do distance-angle. — polarize","text":"data Matrix data frame 2 numeric columns representing x y. xyratio Single number indicating unit ratio x vs y direction. xorigin, yorigin Numbers indicating center polarization.","code":""},{"path":"http://matthewkling.github.io/colors3d/reference/polarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function converting x-y do distance-angle. — polarize","text":"2-column matrix distances angles.","code":""},{"path":"http://matthewkling.github.io/colors3d/news/index.html","id":"colors3d-1019000","dir":"Changelog","previous_headings":"","what":"colors3d 1.0.1.9000","title":"colors3d 1.0.1.9000","text":"Added NEWS.md file track changes package.","code":""}]
